<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!-- 第一步 配置数据源 -->
    <!-- 1.1 引入DBInfo.properties -->
    <context:property-placeholder location="classpath:DBInfo.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 1.2配置数据库信息 -->
        <!-- 基本配置 -->
        <property name="url" value="${jdbc.url}"></property>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!-- 数据库连接池其他配置 -->
        <!-- 配置初始化大小 最大和最小 -->
        <property name="initialSize" value="1"></property>
        <property name="minIdle" value="1"></property>
        <property name="maxActive" value="200"></property>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"></property>
        <!-- 配置间隔多久进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <!-- 配置一个连接在池中最小生存的时间 单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat"/>
    </bean>
    <!-- 第二步：配置SqlSessionFactory对象（重点） -->
    <!-- class为整合jar包当中的一个类 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 2.1将我们上面配置的数据源注入到dataSource这个属性中 -->
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations"
                  value="classpath*:mapper/*.xml"></property>
    </bean>
    <!--2.2.配置mybatis注解 (假设不使用注解的配置方式，这步可以省略) -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itcast.dao"/>
    </bean>
    <!-- 第三步：配置事务管理器 -->
    <!-- class 为在spring jdbc.jar包当中 -->
    <bean id="txManger"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 3.1 对于哪个数据源进行事务管理 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 第四步：配置声明式事务 -->
    <tx:annotation-driven transaction-manager="txManger"/>
    <!-- 第五步：配置注解扫描器 -->
    <!-- 配置注解扫描器（除了@Controller以外的所有注解都进行扫描） -->
    <context:component-scan base-package="com.itcast">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
</beans>